var save;
var globalSaved = false;
var globalLoaded = false;
var globalNext= true;


function getRandomInt(max) {
    return Math.floor(Math.random() * max);
}

function creaTablero(size) {
    //esta forma de crear un array con valores deseados la vi en internet, paar el ejercicio del juego de la vida
    return Array.from({ length: size }, () => Array(size).fill("X"));
}


function validaInput(n, opc, sizeTablero = 0) {
    switch (opc) {
        case 1://tablero
            return n >= 5; //m칤nimo 5x5
        case 2://num minas
            return n >= 1;//m칤nimo una mina
        case 3://pide coordenada para casilla
            return n >= sizeTablero;
        default:
            break;
    }
}

function pideSizeTablero() {
    let size;
    while (true) {
        size = parseInt((prompt("Tama침o del tablero: ")));
        if (validaInput(size,1)) return size;
        alert("Input inv치lido. S칩lo n칰meros positivos mayores o iguales a 5");
    }
}

function pideCoordenada(tag, sizeTablero){
    let pos;
    while (true) {
        pos = parseInt(prompt(`Coordenada ${tag}:`));
        if (!validaInput(pos,3, sizeTablero)) return pos;
        alert("Input inv치lido. Tu coordenada se sale del tablero!");
    }
}



function colocaMinas(tablero, cantidad) {//coloca minas deseadas en posici칩n random dentro del tablero
    let size = tablero.length;
    let minasColocadas = 0;//contador

    while (minasColocadas < cantidad) {
        let x = getRandomInt(size);
        let y = getRandomInt(size);

        if (tablero[x][y] !== "*") {//si no es una mina
            tablero[x][y] = "*";//pone una mina
            minasColocadas++;//aumenta el total
        }
    }
}

function contarMinasAdyacentes(tablero, posX, posY) {//s칩lo devuelve el n칰mero de minas adyacentes a la casilla que recibe
    let size = tablero.length;
    let total = 0;

    //recorre desde la anterior a la siguiente fila
    for (let i = -1; i <= 1; i++) {
        //recorre desde la anterior a la siguiente columna
        for (let j = -1; j <= 1; j++) {
            if (i === 0 && j === 0) continue;//se salta la casilla que llega, s칩lo comprobar치 las adyacentes

            //se mueve por las casillas que rodean a (posX,posY)
            let x = posX + i;
            let y = posY + j;

            if (x >= 0 && x < size && y >= 0 && y < size && tablero[x][y] === "*") { //si se sale del tablero o es una mina, no entra
                total++;//acumula los *
            }
        }
    }
    return total;
}

function generaAdyacentes(tablero) {//rellena las casillas que rodean a las minas
    let size = tablero.length;
    for (let i = 0; i < size; i++) {
        for (let j = 0; j < size; j++) {
            if (tablero[i][j] !== "*") {//omite reemplazar las minas
                //asigna cu치ntas minas adyacentes tiene la casilla
                tablero[i][j] = contarMinasAdyacentes(tablero, i, j); //el valor de la casilla es el total de minas adyacentes
            }
        }
    }
}

//hace lo que dice
function mostrarTablero(tableroVisible) {
    console.table(tableroVisible);
}
function compruebaAdyacentes(tableroReal, tableroVisible, posX, posY) {
    let size = tableroReal.length;
    //comprueba los l칤mites del tablero
    if (posX < 0 || posX >= size || posY < 0 || posY >= size) return;
    //comprueba si ya se ha elegido
    if (tableroVisible[posX][posY] !== "X") return;

    //se altera el tablero visible
    let valor = tableroReal[posX][posY]; //coge el valor de la casilla elegida
    tableroVisible[posX][posY] = valor;//lo asigna al tablero visible en la misma pos

    //si es una casilla vac칤a (0) revela las adyacentes
    if (valor === 0) {
        //recorre desde la anterior a la siguiente fila
        for (let i = -1; i <= 1; i++) {
            //recorre desde la anterior a la siguiente columna
            for (let j = -1; j <= 1; j++) {
                if (i !== 0 || j !== 0) {//se salta la casilla actual
                    //se llama a s칤 misma, pero con las posiciones que rodean a la casilla en cuesti칩n
                    compruebaAdyacentes(tableroReal, tableroVisible, posX + i, posY + j);
                }
            }
        }
    }
}

function victoria(tableroReal, tableroVisible) {
    let size = tableroReal.length;

    //recorre t칩 el tablero
    for (let i = 0; i < size; i++) {
        for (let j = 0; j < size; j++) {
            //si hay alguna mina descubierta o casillas sin elegir, a칰n no has ganado
            if (tableroReal[i][j] !== "*" && tableroVisible[i][j] === "X") {
                return false;
            }
        }
    }
    return true;//has ganado
}

//desaf칤o opcional
function objetoPartida(tableroReal, tableroVisible, numMinas, intentos){
    return {
        tableroReal: tableroReal,
        tableroVisible: tableroVisible,
        minasRestantes: numMinas,
        movimientos: intentos
    }
}

function isEmpty(val){//robado de internet - comprueba si una variable est치 vac칤a, est치 indefinida o tiene longitud cero
    return (val === undefined || val == null || val.length <= 0);
}

let juego = {
    iniciado: false,
    size: 0,
    turnos: 0,
    numMinas: 0,
    tableroReal: [],
    tableroVisible: [],
    fin: false,
};

function iniciarJuego() {
    const size = pideSizeTablero(); // puedes reemplazar por input HTML
    const numMinas = Math.floor(size * size * 0.2);

    alert(`Se colocar치n ${numMinas} minas.`);

    const tableroReal = creaTablero(size);
    colocaMinas(tableroReal, numMinas);
    generaAdyacentes(tableroReal);
    const tableroVisible = creaTablero(size);

    juego = {
        iniciado: true,
        size,
        turnos: 0,
        numMinas,
        tableroReal,
        tableroVisible,
        fin: false
    };

    mostrarTablero(tableroVisible);
}

function siguienteTurno() {
    if (!juego.iniciado || juego.fin) return;

    const posX = pideCoordenada("X", juego.size);
    const posY = pideCoordenada("Y", juego.size);

    juego.turnos++;

    if (juego.tableroReal[posX][posY] === "*") {
        alert("游눤 춰BOOM! Has perdido.");
        mostrarTablero(juego.tableroReal);
        juego.fin = true;
        return;
    }

    compruebaAdyacentes(juego.tableroReal, juego.tableroVisible, posX, posY);

    if (victoria(juego.tableroReal, juego.tableroVisible)) {
        alert("游끥 춰Has ganado!");
        juego.fin = true;
    }

    mostrarTablero(juego.tableroVisible);
}

function botonGuardar() {
    save = objetoPartida(
        juego.tableroReal,
        juego.tableroVisible,
        juego.numMinas,
        juego.turnos
    );
    alert("Partida guardada!");
}

function botonCargar() {
    if (!isEmpty(save)) {
        juego.tableroReal = [...save.tableroReal];
        juego.tableroVisible = [...save.tableroVisible];
        juego.numMinas = save.minasRestantes;
        juego.turnos = save.movimientos;
        alert("Partida cargada!");
        mostrarTablero(juego.tableroVisible);
    } else {
        alert("No hay partida guardada!");
    }
}
